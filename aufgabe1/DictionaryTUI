
import javax.swing.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.*;

public class DictionaryTUI {

    private static Dictionary<String,String> dict = null;

    public static void main(String[] args) throws Exception {
        System.out.println("Welcome to the Dictionary");
        Scanner scan = new Scanner(System.in);
        while(true){
            System.out.print(">>  ");
            String input = scan.nextLine();
            commands(input);
        }

    }

    private static void commands(String command) throws Exception{
        String args[] = command.split(" ");
        switch(args[0]){
            case "exit" :
                exit();
                break;
            case "create":
                create(args);
                break;
            case "read":
                read(args);
                break;
            case "p":
                print();
                break;
            case "s":
                search(args);
                break;
            case "i":
                insert(args);
                break;
            case "r":
                remove(args);
                break;
            case "benchmark":
            case "b":
                benchmarks();
                break;
        }
    }

    private static void benchmarks(){
        long start = System.currentTimeMillis();


        List<String> deutscheWoerter = new LinkedList<>();;
        List<String> englischeWoerter = new LinkedList<>();

        for (Dictionary.Entry<String,String> e : dict) {
            deutscheWoerter.add(e.getKey());
            englischeWoerter.add(e.getValue());
        }

        // Suche deutsche Wörter
        long gesamtZeitD = 0;
        ListIterator<String> itD = deutscheWoerter.listIterator();
        long startD = System.currentTimeMillis();;

        for (var e : deutscheWoerter) {
            dict.search(itD.next());

        }
        long endD = System.currentTimeMillis();;
        gesamtZeitD += (endD -startD);

        System.out.printf("Benchmark für %d erfolgreich gefundene Einträge : %d ms \n",dict.size() ,gesamtZeitD );


        // Englische Wörter
        long gesamtZeitE = 0;
        ListIterator<String> itE = englischeWoerter.listIterator();
        long startE = System.currentTimeMillis();;

        for (var e : englischeWoerter) {
            dict.search(itE.next());

        }
        long endE = System.currentTimeMillis();;
        gesamtZeitE += (endE - startE);

        System.out.printf("Benchmark für %d nicht gefundene Einträge : %d ms \n",dict.size() ,gesamtZeitE );
    }

    private static void remove(String[] args){
        if(args.length != 2){
            System.out.println("Error: Remove");
        }
        dict.remove(args[1]);
        System.out.println(args[1] + " has been removed");
    }

    private static void insert(String[] args){
        if(args.length != 3){
            System.out.println("Excpected two arguments");
        }
        if(dict == null){
            System.out.println("Dictionary was not created");
            return;
        }
        dict.insert(args[1],args[2]);
        System.out.println(args[1] + " wurde eingefügt");

    }

    private static void search(String[] args){
        if(args.length != 2){
            throw new UnsupportedOperationException();
        }
        String word = dict.search(args[1]);
        if(word == null){
            System.out.println(args[1] + " not found!");
            return;
        }
        System.out.println(word);
    }

    private static void print(){
        System.out.println(dict.toString());
    }

    private static void read(String[] args) throws Exception{
        if(args.length != 3){
            throw new UnsupportedOperationException();
        }
        if(dict == null){
            throw new NoSuchElementException();
        }

        File file;

        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(".../src/aufgabe1"));

        int returnVal = fc.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            System.out.println(file);
        } else {
            System.out.println("No file selected");
            return;
        }

        int n = Integer.parseInt(args[1]);

        //System.out.println(args[2]);
        //File file = new File(args[2]);
        FileReader in = new FileReader(file);
        BufferedReader br = new BufferedReader(in);


        Scanner reader = new Scanner(file);
        long readTime = 0;
        long start, end;


        start = System.currentTimeMillis();
        for(int i=0; i < n; i++){
            String line = reader.nextLine();
            String[] tmp = line.split(" ");
            dict.insert(tmp[0],tmp[1]);
        }
        end = System.currentTimeMillis();
        readTime = (end-start);
        System.out.printf("Gemessenezeit für %d ist %d ms \n",n,readTime);
    }

    private static void create(String[] args){
        if(args.length == 1){
            dict = new SortedArrayDictionary<>();
            System.out.println("Created SortedArrayDict");
            return;
        } else {
            switch(args[1]){
                case "SortedArrayDictionary":
                case "Sorted":
                    dict = new SortedArrayDictionary<>();
                    System.out.println("Created ArrayDict");
                    break;
                case "HashDictionary":
                case "Hash":
                    dict = new HashDictionary<>();
                    System.out.println("Created HashDict");
                    break;
                case "BinaryTreeDictionary":
                case "Binary":
                    dict = new BinaryTreeDictionary<>();
                    System.out.println("Created BinaryTreeDict");
                    break;
                default:
                    System.out.println("Please use the supported Dictionaries");
            }
        }
    }

    private static void exit(){
        System.out.println("Auf Wiedersehen");
        System.exit(0);
    }
}
